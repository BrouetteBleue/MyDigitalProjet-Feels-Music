generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                             Int          @id @default(autoincrement())
  role                           Int          @default(0)
  pseudo                         String       @unique(map: "pseudo") @db.VarChar(100)
  password                       String       @db.VarChar(255)
  phone                          Int?
  email                          String       @unique(map: "email") @db.VarChar(255)
  country                        String?      @db.VarChar(255)
  avatar                         String?      @db.VarChar(255)
  insta                          String?      @db.VarChar(255)
  open_to_work                   Boolean?
  created_at                     DateTime     @default(now()) @db.DateTime(0)
  modified                       DateTime     @default(now()) @db.DateTime(0)
  chat_chat_senderToaccount      chat[]       @relation("chat_senderToaccount")
  chat_chat_receiverToaccount    chat[]       @relation("chat_receiverToaccount")
  command                        command[]
  comment                        comment[]
  like                           like[]
  production                     production[]
  report_report_senderToaccount  report[]     @relation("report_senderToaccount")
  report_report_accusedToaccount report[]     @relation("report_accusedToaccount")
}

model category {
  id         Int           @id @default(autoincrement())
  name       category_name
  production production[]
}

model chat {
  id                             Int            @id @default(autoincrement())
  sender                         Int
  receiver                       Int
  created_at                     DateTime       @default(now()) @db.DateTime(0)
  account_chat_senderToaccount   account        @relation("chat_senderToaccount", fields: [sender], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "chat_ibfk_1")
  account_chat_receiverToaccount account        @relation("chat_receiverToaccount", fields: [receiver], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "chat_ibfk_2")
  chat_message                   chat_message[]

  @@index([receiver], map: "receiver")
  @@index([sender], map: "sender")
}

model chat_message {
  id         Int      @id @default(autoincrement())
  chat_id    Int
  sender     Int
  message    String   @db.Text
  created_at DateTime @default(now()) @db.DateTime(0)
  chat       chat     @relation(fields: [chat_id], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "chat_message_ibfk_1")

  @@index([chat_id], map: "chat_id")
}

model command {
  id            Int        @id @default(autoincrement())
  account_id    Int
  production_id Int
  total         Decimal    @db.Decimal(10, 2)
  created_at    DateTime   @default(now()) @db.DateTime(0)
  modified      DateTime   @default(now()) @db.DateTime(0)
  account       account    @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "command_ibfk_1")
  production    production @relation(fields: [production_id], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "command_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([production_id], map: "production_id")
}

model comment {
  id            Int        @id @default(autoincrement())
  account_id    Int
  production_id Int
  message       String     @db.Text
  created_at    DateTime   @default(now()) @db.DateTime(0)
  modified      DateTime   @default(now()) @db.DateTime(0)
  account       account    @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "comment_ibfk_1")
  production    production @relation(fields: [production_id], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "comment_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([production_id], map: "production_id")
}

model like {
  id            Int        @id @default(autoincrement())
  account_id    Int
  production_id Int
  created_at    DateTime   @default(now()) @db.DateTime(0)
  account       account    @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "like_ibfk_1")
  production    production @relation(fields: [production_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "like_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([production_id], map: "production_id")
}

model playlist {
  id            Int             @id @default(autoincrement())
  title         String          @db.VarChar(255)
  likes         Int
  category_id   Int
  tags          String?         @db.Text
  created_at    DateTime        @default(now()) @db.DateTime(0)
  modified      DateTime        @default(now()) @db.DateTime(0)
  playlist_song playlist_song[]
}

model playlist_song {
  id            Int      @id @default(autoincrement())
  playlist_id   Int
  production_id Int
  created_at    DateTime @default(now()) @db.DateTime(0)
  playlist      playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "playlist_song_ibfk_1")

  @@index([playlist_id], map: "playlist_id")
}

model production {
  id          Int       @id @default(autoincrement())
  account_id  Int
  style_id    Int
  category_id Int
  tags        String?   @db.Text
  title       String    @db.VarChar(255)
  sound       String    @db.VarChar(255)
  cover       String?   @db.VarChar(255)
  description String?   @db.Text
  likes       Int?
  views       Int?
  downloads   Int?
  bpm         Int?
  length      String    @db.VarChar(10)
  price       Decimal   @db.Decimal(5, 2)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  modified    DateTime  @default(now()) @db.DateTime(0)
  command     command[]
  comment     comment[]
  like        like[]
  account     account   @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "production_ibfk_1")
  category    category  @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "production_ibfk_2")
  style       style     @relation(fields: [style_id], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "production_ibfk_3")

  @@index([account_id], map: "account_id")
  @@index([category_id], map: "category_id")
  @@index([style_id], map: "style_id")
}

model report {
  id                              Int          @id @default(autoincrement())
  sender                          Int
  accused                         Int
  motif                           report_motif
  description                     String       @db.Text
  created_at                      DateTime     @default(now()) @db.DateTime(0)
  modified                        DateTime     @default(now()) @db.DateTime(0)
  account_report_senderToaccount  account      @relation("report_senderToaccount", fields: [sender], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "report_ibfk_1")
  account_report_accusedToaccount account      @relation("report_accusedToaccount", fields: [accused], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "report_ibfk_2")

  @@index([accused], map: "accused")
  @@index([sender], map: "sender")
}

model style {
  id         Int          @id @default(autoincrement())
  name       style_name
  production production[]
}

enum category_name {
  Hard_Rock     @map("Hard Rock")
  Soft_Rock     @map("Soft Rock")
  Punk_Rock     @map("Punk Rock")
  Bebop
  Swing
  Jazz_Fusion   @map("Jazz Fusion")
  Delta_Blues   @map("Delta Blues")
  Chicago_Blues @map("Chicago Blues")
  Trap
  Drill
  Techno
  House
  Dubstep
  Heavy_M_tal   @map("Heavy Métal")
  Death_M_tal   @map("Death Métal")
  Black_M_tal   @map("Black Métal")
  Baroque
  Romantique
  Moderne
}

enum style_name {
  Pop
  Rock
  Jazz
  Blues
  Country
  Soul
  R_B       @map("R&B")
  Hip_Hop   @map("Hip-Hop")
  Electro
  Reggae
  M_tal     @map("Métal")
  Classique
  Disco
  Funk
  Rap
  Afrobeat
  K_pop     @map("K-pop")
}

enum report_motif {
  Propos_inappropri_s   @map("Propos inappropriés")
  Usurpation_d_identit_ @map("Usurpation d'identité")
  Autres
}
